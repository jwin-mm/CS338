# Kaung Thant (John) Win
# Contributor: Jeremy Gautama
# Reference: https://unstop.com/blog/lcm-of-two-numbers-in-python

import math

n = 3224179416127789278439502545376222667479725997556949116694888356815776918850342697209098823634971493442125181494125792309850615640271692666484565878048713241644706840779602753250601626013427558245569670666952665943451785900072825008220179423934657321622857207333838593276988579464984514588868111710335388021451908004903061379652241474253377750379113787691633935409010163741305173128690126418812520307973767956952813578080551908648872572362285158320737139569930425918139772438536074089443341775951308751101032853253900626765976817451794150839854647042230871563949249408678425031594999051510419235586081109680381856979961027547222505226296452442702644726667741738769218983795225161828817627232816443807020046511574916501199668753794931313357591206630065586966286402301509914168250000019150157160828859089173004775796837429049371447865938130096287113916431448481684493654474268844473679334943928825445994093368966347358445263999
e = 65537
d = 382124239002953780643999004696363583917545687652634025142155263390762641780219242719717720719299051122207816343826740174273764161972682009218321223585105187180803509487497156091192858432971140791910241369411330097574975535669402873397452944832819043229808193057830471848169165909807025847738960378993216105283388825295894615604704369709996939842298291961235403730720838790809736709770752022069819838241017750445877707739816289909191391535498872185126044963193914384558078108419960314161174309801600623729315513561975074267384304708899713722653914493104392495606954074949623251674738149262656545882809018216643309165256203186254831505838963691044432165024862236103872272696152976466755029274827077794020861961629821549627737123212973522574142546736867520952548771171856648435069891074619838483175515814468293996713424720658046381907304043450170914288667206500430164255991407723854292062432991852101731830492483861397082263521
p = 1795946095132254117149039210972463925532610528933325484757560933627485420681630868082517335360404011565659482754466581105091404428579016450324645937706078075909864921020242331282182933050763104950252230950537616391041777537654467208648256593064282875442824238666632309574994465374959040446719409330274198058049499861200081119262031141519964429056094620244742787128880429694453694284655233649880722762519872283745176969023370336298301516109024179327675493895954473
q = 1795254002815913884786617217996672410244838265810026541295057558187257529523851304443573743347699557508329492624597499434159887976488576970760976747058021866777425982341683196803155661068841354260497669569132512053034474712593967520653152339449350062410562470442361291985052613581784604370384079075841052129767618027184880435793249349971525463811740664055232254039100215534926647408276672261091522715853082906056068383712840111322866493888291017904723141618191463

lambda_n = (p-1) * (q-1) // math.gcd(p-1, q-1)

message = 1

encrypted = message**e % lambda_n
decrypted = encrypted**d % lambda_n
print("encrypted: ", encrypted)
print("decrypted: ", decrypted)

if (e*d % lambda_n == 1):
    print("Sanity check for lambda passed.")

if (message == decrypted):
    print("Sanity check for encryption/ decryption passed.")




