Kaung Thant (John) Win
Contributor: Jeremy Gautama

Original Contents

-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----


-----BEGIN RSA PUBLIC KEY-----
MIIBigKCAYEAjhLELzMsW3JsWwbVR5zdo2oHEqJW8wZz42cvH+zOqfFXDp7Tpgze
vL7Z27/Vsxe5ofSrSRt8oW0jRHAc+GcORYzTUmYzemQcHW6AhbS0ROFBv4UqfGC0
/g65EuAHvJRDN/QyCfMqAoqSkNXNrwlVmRqQi8fHwBh2Q9jH6gSpRI4g6w5ZNic1
jhVuKo7w7jJSdxxyXY2ZZBtiQyeriFSqSEBM3vMNYiCm72tPnuyC+nTrusyNBuBm
NKkqwU6Q8v/ds5m5whgcwZicu/HMEwZcuWiqnr1Pe3siES1xXaDJ7A/hyY8RyIfX
t76SWKeJ0we29DDSBGY889j7gEhrnLPUTNKdAoXJW3PIxpDdV4zRWUfpFCBGAel2
5QSwucTl/uTXqjdjkjW5foTwz0gwzOL99i8gHJPvuktpDXLph5Mz7OrxIVuz/cA9
6GtxUtf5PAGCWpItYcr2wywiPe1Wi5UqpDUYRmU6eypH+rEpn1IWHU55GNkofSPE
Z1AuZpKfpFx/AgMBAAE=
-----END RSA PUBLIC KEY-----


------------------------------------------------------------------------------

Private Key

Expected items: 
version           Version,
modulus           INTEGER,  -- n
publicExponent    INTEGER,  -- e
privateExponent   INTEGER,  -- d
prime1            INTEGER,  -- p
prime2            INTEGER,  -- q
exponent1         INTEGER,  -- d mod (p-1)
exponent2         INTEGER,  -- d mod (q-1)
coefficient       INTEGER,  -- (inverse of q) mod p
otherPrimeInfos   OtherPrimeInfos OPTIONAL 


4. I just copy-pasted the key into the Lapo Luchini tool and it returned all the necessary information. 

5. 
1st INTEGER --> version
0

2nd INTEGER --> modulus
0x

3rd INTEGER --> publicExponent
65537

4th INTEGER --> privateExponent
0x10 D6 99 E3 30 E0 CC 4D CE C3 28 6C D5 64 A5 6D 72 BE E2 84 7F 0D A5 46 CD 92 DD D0 F3 7E 0D 97 89 9B DF FD C7 01 0B 7D 0F 44 3E CE 89 03 5A DD 28 C6 C3 6E 3C BB 14 09 72 A9 45 28 5F 2B 1C FE 92 91 91 2D DA 62 B7 C4 0F F0 ED 7B EB 4E 2F 99 0A F3 D4 A7 E9 14 85 1E FF 46 61 68 4F ED 17 C8 07 B5 02 21 3A 6D 50 DE 74 E9 D9 8D 31 20 F2 C0 DC 97 23 C4 9F CB 5D 45 81 B1 0B 05 EA 06 2D C1 32 96 E9 47 C5 7F F6 D1 9F 7F 43 BD 56 97 6F 3B 65 86 92 3F 68 42 DF CC 7C 64 3D 2A BA A9 08 D8 30 AC 16 58 74 23 9C 7F 17 2D 29 6D F5 2B 68 DD 11 50 93 0C 66 88 E8 A9 76 75 EC C7 3A 58 07 DF 0F 9A 18 C8 01 46 88 87 0E E7 0D 6C 84 A8 A8 20 42 7F F9 14 36 51 CF D9 30 72 5E 60 2C 1A A8 BC 5F 80 C3 43 A3 6F FF CB 65 52 BE C8 E9 AB 7A B3 CE A9 95 6C D3 53 83 46 E0 1B B1 49 30 21 41 31 BA 67 BB 53 F6 AE 98 14 92 8B A3 09 55 EA 81 50 F0 34 3E AA C0 A3 7C C5 70 30 3F 93 1A A0 06 F2 B4 33 5A A5 4E 2D 91 4D 1F A6 1C 47 D3 AE 71 2E 0F DB 28 9B 5C AB 0A 64 49 66 5F 46 8B 41 62 5C 56 F8 00 32 7E 28 2A 6F 7A D7 D5 4F 3A 7C E9 2D 3F 2F 8A 4E 9E CD 0F 42 D3 80 B3 55 76 88 5D 93 1F 7B 16 D8 E2 36 61 A8 DD 94 00 88 FB 78 9E BC 0A 8D F2 FD 3D F0 44 51 C5 40 BA 13 47 8C CF E1

5th INTEGER --> prime1
0x

6th INTEGER --> prime2
0x

7th INTEGER --> exponent1
0x3E 08 45 6E ED BA 50 9A EE 49 AA 0D FC F6 39 C5 21 8F 7D C1 0B 87 69 B4 85 DB 3D AF 5C D5 B7 19 4B FC F7 8E A1 24 D1 B3 63 5D E9 40 30 25 03 67 85 B1 8B C0 F4 C1 DF 51 D3 F6 88 B8 17 DB C1 74 79 33 04 C4 78 1D A4 DF 17 FA 1E 9C 4B 43 F3 90 87 A8 74 42 F9 FC 52 82 B1 24 56 F9 B0 F0 FB 31 5A AE FB DF D2 2E 9C 31 6B B8 B9 AE FF 78 E7 B1 AB FB 44 D4 6E 8D 16 D0 39 2D 1C 32 8F 95 7D 85 7F 99 4B C7 61 69 F1 DD F8 B5 63 A3 CD 60 78 F5 B2 74 27 61 01 09 5B B8 5E ED 89 4F 2D C9 D2 7E 3A E6 EA F7 C0 1A F3 5F 2E 6E 23 C3 87 F2 87 0F 01 AD 61 46 63 AE 0B 79 3E 95 F7 AA 00 EC E2 29

8th INTEGER --> exponent2
0x

9th INTEGER --> coefficient
0x04 6B 26 B4 31 77 28 53 04 67 26 10 BD 91 E3 95 3D 7E 81 3F FF B1 9E A1 60 1E AB 20 A2 16 D6 22 0D 0E 84 7B A7 5F 01 42 3C CC 07 9F C3 22 AA 17 C6 C1 25 9E 14 A8 F5 F8 B2 EA 3E 24 CA 79 CC F3 71 47 CD 46 17 3D 1C 2A BD 51 B1 6B CF F0 EC 34 8C 5C 46 23 39 73 E2 A0 37 30 2A AA AD 3F 86 DF 93 09 18 D5 65 79 11 F0 33 C2 57 36 83 30 BE 95 4C BE BF 27 57 E7 84 91 9D 59 BA C6 67 CF FA C8 BC 42 1E 40 CA 54 6F 70 84 E9 C3 CD AA EF 6C AF 23 47 2E 52 4F F8 33 B7 77 59 57 9E 86 B0 BA 69 77 76 3E 52 6D 06 43 70 F3 48 F9 58 C8 87 4F 10 24 B1 AF B2 48 1D 7B A4 EC 11 E9 F0 E6 DE 86 69


------------------------------------------------------------------------------

Public Key

Expected syntax:
RSAPublicKey ::= SEQUENCE {
     modulus           INTEGER,  -- n
     publicExponent    INTEGER   -- e
}

1st INTEGER --> modulus
0x008e12c42f332c5b726c5b06d5479cdda36a0712a256f30673e3672f1feccea9f1570e9ed3a60cdebcbed9dbbfd5b317b9a1f4ab491b7ca16d2344701cf8670e458cd35266337a641c1d6e8085b4b444e141bf852a7c60b4fe0eb912e007bc944337f43209f32a028a9290d5cdaf0955991a908bc7c7c0187643d8c7ea04a9448e20eb0e593627358e156e2a8ef0ee3252771c725d8d99641b624327ab8854aa48404cdef30d6220a6ef6b4f9eec82fa74ebbacc8d06e06634a92ac14e90f2ffddb399b9c2181cc1989cbbf1cc13065cb968aa9ebd4f7b7b22112d715da0c9ec0fe1c98f11c887d7b7be9258a789d307b6f430d204663cf3d8fb80486b9cb3d44cd29d0285c95b73c8c690dd578cd15947e914204601e976e504b0b9c4e5fee4d7aa37639235b97e84f0cf4830cce2fdf62f201c93efba4b690d72e9879333eceaf1215bb3fdc03de86b7152d7f93c01825a922d61caf6c32c223ded568b952aa4351846653a7b2a47fab1299f52161d4e7918d9287d23c467502e66929fa45c7f

2nd INTEGER --> publicExponent
65537


------------------------------------------------------------------------------

Sanity Check 

The modulus (n) of the private key and the public key are the same (By observation). 

The following python code was used for further sanity checks. 



-------------------------BEGIN CODE-----------------------------------

# Kaung Thant (John) Win
# Contributor: Jeremy Gautama
# Reference: https://unstop.com/blog/lcm-of-two-numbers-in-python

import math

n = 3224179416127789278439502545376222667479725997556949116694888356815776918850342697209098823634971493442125181494125792309850615640271692666484565878048713241644706840779602753250601626013427558245569670666952665943451785900072825008220179423934657321622857207333838593276988579464984514588868111710335388021451908004903061379652241474253377750379113787691633935409010163741305173128690126418812520307973767956952813578080551908648872572362285158320737139569930425918139772438536074089443341775951308751101032853253900626765976817451794150839854647042230871563949249408678425031594999051510419235586081109680381856979961027547222505226296452442702644726667741738769218983795225161828817627232816443807020046511574916501199668753794931313357591206630065586966286402301509914168250000019150157160828859089173004775796837429049371447865938130096287113916431448481684493654474268844473679334943928825445994093368966347358445263999
e = 65537
d = 382124239002953780643999004696363583917545687652634025142155263390762641780219242719717720719299051122207816343826740174273764161972682009218321223585105187180803509487497156091192858432971140791910241369411330097574975535669402873397452944832819043229808193057830471848169165909807025847738960378993216105283388825295894615604704369709996939842298291961235403730720838790809736709770752022069819838241017750445877707739816289909191391535498872185126044963193914384558078108419960314161174309801600623729315513561975074267384304708899713722653914493104392495606954074949623251674738149262656545882809018216643309165256203186254831505838963691044432165024862236103872272696152976466755029274827077794020861961629821549627737123212973522574142546736867520952548771171856648435069891074619838483175515814468293996713424720658046381907304043450170914288667206500430164255991407723854292062432991852101731830492483861397082263521
p = 1795946095132254117149039210972463925532610528933325484757560933627485420681630868082517335360404011565659482754466581105091404428579016450324645937706078075909864921020242331282182933050763104950252230950537616391041777537654467208648256593064282875442824238666632309574994465374959040446719409330274198058049499861200081119262031141519964429056094620244742787128880429694453694284655233649880722762519872283745176969023370336298301516109024179327675493895954473
q = 1795254002815913884786617217996672410244838265810026541295057558187257529523851304443573743347699557508329492624597499434159887976488576970760976747058021866777425982341683196803155661068841354260497669569132512053034474712593967520653152339449350062410562470442361291985052613581784604370384079075841052129767618027184880435793249349971525463811740664055232254039100215534926647408276672261091522715853082906056068383712840111322866493888291017904723141618191463

lambda_n = (p-1) * (q-1) // math.gcd(p-1, q-1)

message = 1

encrypted = message**e % lambda_n
decrypted = encrypted**d % lambda_n
print("encrypted: ", encrypted)
print("decrypted: ", decrypted)

if (e*d % lambda_n == 1):
    print("Sanity check for lambda passed.")

if (message == decrypted):
    print("Sanity check for encryption/ decryption passed.")

-------------------------END CODE-----------------------------------








